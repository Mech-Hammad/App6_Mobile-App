<LoginScreen>: # We give this name. It's a Screen
    GridLayout:
        cols: 1 # make sure to add cols field and don't rely on default
        GridLayout:
            cols: 1
            padding: 15, 15
            spacing: 20, 20
    
            Label: # an object that is inside the kv library and kv recognizes
                text: "User Login"
                font_size: '20sp' # sp for space independent pixels
            TextInput:
                id: username
                hint_text: "Username"
            TextInput:
                id: password
                password: True # So password appears as astericks instead of text
                hint_text: "Password"
            RelativeLayout: # This allows to place button relative to this layout box
                Button:
                    text: "Login"
                    on_press: root.check_login(root.ids.username.text, root.ids.password.text)
                    size_hint: 0.3, 0.5
                    pos_hint: {'center_x': 0.5, 'center_y':0.6}
            Label:
                id: wrong_credentials
                text: ""
        
        GridLayout:
            cols: 2
            size_hint: 0.2, 0.2 # this grid to take only 20% of horizontal and 20% of vertical space
            padding: 10, 10
            spacing: 10, 0 # 0 has no effect here since no other vertical objects inside this grid
            Button:
                text: "Forgot Password?"
                background_color: 1,1,1,0 # intensity of r,g,b and then opacity
                # now change opacity based on state (normal means natural unpressed state)
                opacity: 1 if self.state == 'normal' else 0.5 # this applies to text inside this button
                color: 0.1, 0.7, 1, 1 # Applies to Text
            Button:
                text: "Sign up"
                on_press: root.my_sign_up()
                background_color: 1,1,1,0 # intensity of r,g,b and then opacity
                # now change opacity based on state (normal means natural unpressed state)
                opacity: 1 if self.state == 'normal' else 0.5 # this applies to text inside this button
                color: 0.1, 0.7, 1, 1 # Applies to Text

<SignupScreen>: # Another Custom Screen
    GridLayout:
        cols:1
        padding: 20, 20
        spacing: 20, 20
        Label:
            text: "Sign up to my Masterpiece"
        TextInput:
            id: username # id to refer to it
            hint_text: "Username"
        TextInput:
            id: password
            password: True # So password appears as astericks instead of text
            hint_text: "Password"
        Button:
            text: "Submit"
            on_press: root.add_user(root.ids.username.text, root.ids.password.text) # refer to the above TexInput fields by ID

<SignUpSuccessScreen>
    GridLayout:
        cols: 1
        Label:
            text: "SignUp Successful"
        Button:
            text: "Login Page"
            on_press: root.redirect_to_login()

<HomeScreen>
    GridLayout:
        cols: 1
        padding: 30,30
        spacing: 30,30
        RelativeLayout:
            ImageButton: # our custom button
                on_press: root.logout()
                source: 'logout_hover.png' if self.hovered else 'logout_nothover.png'
                size_hint: 0.35, 0.35
                pos_hint: {'center_x': 0.93, 'center_y': 0.8}
        Label:
            text: "How do you feel?"
        TextInput:
            id: user_mood
            hint_text: "Things to Try: happy, sad, unloved ,..."
        Button:
            text: "Shazam!"
            on_press: root.change_mood(root.ids.user_mood.text)
        ScrollView:
            Label:
                id: mood_text
                text: "" # Empty by default
                # but setting text_height to None, The text can even get out to the widget vertically to be fully displayed
                text_size: self.width, None # resize to fit the Label Widget
                size_hint_y: None # so that widget is not limited to the size percentage
                height: self.texture_size[1] # texture height is a tuple (width, height)
<RootWidget>:
    LoginScreen:
        name: "login_screen"
    SignupScreen:
        name: "signup_screen"
    SignUpSuccessScreen:
        name: "sign_up_success_screen"
    HomeScreen:
        name: "home_screen"